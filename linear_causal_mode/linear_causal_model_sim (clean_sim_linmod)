############################
### linear causal model  ###
############################

library(nleqslv)

source("fun_alpha_functions_linmod.R")
source("cov_mat_linmod.R")
source("dh_functions_linmod.R")
       
n = 1000
m = 1000

cc = 0.2
jump = 0.02

alpha_range = seq(-cc, +cc, by = jump)

# simulation 
psii = matrix(NA, ncol = 4, nrow = m * length(alpha_range))
sd_g = matrix(NA, ncol = 4, nrow = m * length(alpha_range))

set.seed(1)

for (i in 1:m) {

z = rbinom(n, 1, 0.5)

# mean(z)

x = rbinom(n, 1, prob = expit( -1 + 3.6 * z ) )  

summary(glm( x ~ z, family = binomial() ))

# mean(x)

############################
### alpha = 0, psi = 1.5 ###
############################

b3    = nleqslv(x = 2, fn = fun_alpha_bxz, alpha = 0, psi = 1.5)$x
beta  = c(1, 1, 1, b3)

y = rnorm(n, beta[1] + beta[2] * x + beta[3] * z + beta[4] * x * z, 1) 

# beta %*% c(1, x, z, x * z)

# mean(y)

alpha_range = seq(-cc, cc, by = 0.02)

for (j in 1:length(alpha_range)) {
  
psii[i + (j - 1) * m, 1] = nleqslv(x = 0, fn = dh_alpha, alpha = alpha_range[j])$x

sd_g[i + (j - 1) * m, 1] = sqrt(v_cov_alph(psi = psii[i + (j - 1) * m, 1],  alpha = alpha_range[j])[2, 2]/n)

}

##############################
### alpha = 0.5, psi = 1.5 ###
##############################

b3    = nleqslv(x = 2, fn = fun_alpha_bxz, alpha = 0.5, psi = 1.5)$x
beta  = c(1, 1, 1, b3)

y = rnorm(n, beta[1] + beta[2] * x + beta[3] * z + beta[4] * x * z, 1 ) 

# mean(y)

alpha_range = seq(0.5 - cc, 0.5 + cc, by = jump)

for (j in 1:length(alpha_range) ) {
  
psii[i + (j - 1) * m, 2] = nleqslv(x = 0, fn = dh_alpha, alpha = alpha_range[j])$x

sd_g[i + (j - 1) * m, 2] = sqrt(v_cov_alph(psi   = psii[i + (j - 1) * m, 2],  
                                           alpha = alpha_range[j])[2, 2] / n)

}

##########################
### alpha = 0, psi = 0 ###
##########################

b3    = nleqslv(x = 2, fn = fun_alpha_bxz, alpha = 0, psi = 0)$x
beta  = c(1, 1, 1, b3)

y = rnorm(n, beta[1] + beta[2] * x + beta[3] * z + beta[4] * x * z, 1) 

# mean(y)

alpha_range = seq(-cc,  cc, by = jump)

for (j in 1:length(alpha_range) ) {
psii[i + (j - 1) * m, 3] = nleqslv(x = 0, fn = dh_alpha, alpha = alpha_range[j])$x

sd_g[i + (j - 1) * m, 3] = sqrt(v_cov_alph(psi   = psii[i + (j - 1) * m, 3],
                                           alpha = alpha_range[j])[2, 2] / n)
}

############################
### alpha = 0.5, psi = 0 ###
############################

b3    = nleqslv(x = 2, fn = fun_alpha_bxz, alpha = 0.5, psi = 0)$x
beta  = c(1, 1, 1, b3)

y = rnorm(n, beta[1] + beta[2] * x + beta[3] * z + beta[4] * x * z, 1) 

# mean(y)

alpha_range = seq(0.5 - cc, 0.5 + cc, by = jump)

for (j in 1:length(alpha_range)) {
psii[i + (j - 1) * m, 4] = nleqslv(x = 0, fn = dh_alpha, alpha = alpha_range[j])$x

sd_g[i + (j - 1) * m, 4] = sqrt(v_cov_alph(psi   = psii[i + (j - 1) * m, 4],
                                           alpha = alpha_range[j])[2, 2] / n)
}

print(i)

}

### data tables for simulation summary

apply(psii, 2, mean)
summary(psii)

bb = numeric()

for (k in 1:length(alpha_range)) {
 b1 = rep(alpha_range[k], m)
 bb = c(bb, b1)
 }

table(bb)

psii = data.frame(psii)
sd_g = data.frame(sd_g)

psii$alpha = bb

names(psii) = c("psi0_1.5", "psi0.5_1.5", "psi0_0", "psi0.5_0", "alpha")

names(sd_g) = c("sd0_1.5", "sd0.5_1.5", "sd0_0", "sd0.5_0")

psi_sd_dat = cbind(psii, sd_g)

### coverage prob alpha = 0 & psi = 1.5
psi_sd_dat$l0_1.5 = psi_sd_dat$psi0_1.5 - 1.96 * psi_sd_dat$sd0_1.5 
psi_sd_dat$u0_1.5 = psi_sd_dat$psi0_1.5 + 1.96 * psi_sd_dat$sd0_1.5 

cp0_1.5 = numeric()

for (j in 1:length(alpha_range)) {
cp0_1.5[j] = mean( ifelse( psi_sd_dat$l0_1.5[psi_sd_dat$alpha == alpha_range[j]] < 1.5 &
                     1.5 < psi_sd_dat$u0_1.5[psi_sd_dat$alpha == alpha_range[j]], 1, 0 ) )
}

### length CI alpha = 0 & psi = 1.5
ln0_1.5 = numeric()

for (j in 1:length(alpha_range)) {
  ln0_1.5[j] = mean( psi_sd_dat$u0_1.5[psi_sd_dat$alpha == alpha_range[j]] - 
                     psi_sd_dat$l0_1.5[psi_sd_dat$alpha == alpha_range[j]] ) 
}

### coverage prob alpha = 0.5 & psi = 1.5
psi_sd_dat$l0.5_1.5 = psi_sd_dat$psi0.5_1.5 - 1.96 * psi_sd_dat$sd0.5_1.5 
psi_sd_dat$u0.5_1.5 = psi_sd_dat$psi0.5_1.5 + 1.96 * psi_sd_dat$sd0.5_1.5 

cp0.5_1.5 = numeric()

for (j in 1:length(alpha_range)) {
  cp0.5_1.5[j] = mean( ifelse( psi_sd_dat$l0.5_1.5[psi_sd_dat$alpha == alpha_range[j]] < 1.5 &
                               1.5 < psi_sd_dat$u0.5_1.5[psi_sd_dat$alpha == alpha_range[j]], 1, 0 ) )
}

### length CI alpha = 0.5 & psi = 1.5
ln0.5_1.5 = numeric()

for (j in 1:length(alpha_range)) {
  ln0.5_1.5[j] = mean( psi_sd_dat$u0.5_1.5[psi_sd_dat$alpha == alpha_range[j]] - 
                       psi_sd_dat$l0.5_1.5[psi_sd_dat$alpha == alpha_range[j]] )
}

### coverage prob alpha = 0 & psi = 0
psi_sd_dat$l0_0 = psi_sd_dat$psi0_0 - 1.96 * psi_sd_dat$sd0_0 
psi_sd_dat$u0_0 = psi_sd_dat$psi0_0 + 1.96 * psi_sd_dat$sd0_0 

cp0_0 = numeric()

for (j in 1:length(alpha_range)) {
  cp0_0[j] = mean( ifelse( psi_sd_dat$l0_0[psi_sd_dat$alpha == alpha_range[j]] < 0 &
                     0   < psi_sd_dat$u0_0[psi_sd_dat$alpha == alpha_range[j]], 1, 0 ) )
}

### length CI alpha = 0 & psi = 0
ln0_0 = numeric()

for (j in 1:length(alpha_range)) {
  ln0_0[j] = mean( psi_sd_dat$u0_0[psi_sd_dat$alpha == alpha_range[j]] - 
                   psi_sd_dat$l0_0[psi_sd_dat$alpha == alpha_range[j]] ) 
}

### coverage prob alpha = 0.5 & psi = 0
psi_sd_dat$l0.5_0 = psi_sd_dat$psi0.5_0 - 1.96 * psi_sd_dat$sd0.5_0 
psi_sd_dat$u0.5_0 = psi_sd_dat$psi0.5_0 + 1.96 * psi_sd_dat$sd0.5_0 

cp0.5_0 = numeric()

for (j in 1:length(alpha_range)) {
  cp0.5_0[j] = mean( ifelse( psi_sd_dat$l0.5_0[psi_sd_dat$alpha == alpha_range[j]] < 0 &
                       0   < psi_sd_dat$u0.5_0[psi_sd_dat$alpha == alpha_range[j]], 1, 0 ) )
}

### length CI alpha = 0.5 & psi = 0
ln0.5_0 = numeric()

for (j in 1:length(alpha_range)) {
  ln0.5_0[j] = mean( psi_sd_dat$u0.5_0[psi_sd_dat$alpha == alpha_range[j]] - 
                     psi_sd_dat$l0.5_0[psi_sd_dat$alpha == alpha_range[j]] ) 
}

# data with alpha, coverage probs, and ci length
dat_cp = data.frame( alpha_range0 = seq(-cc,  cc, by = jump), 
                     cp0_1.5,
                     cp0_0,
                     ln0_1.5,
                     ln0_0,
                     alpha_range0.5 = seq(0.5 - cc, 0.5 + cc, by = jump),
                     cp0.5_1.5,
                     cp0.5_0, 
                     ln0.5_1.5,
                     ln0.5_0)
